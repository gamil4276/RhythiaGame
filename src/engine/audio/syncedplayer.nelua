require "raylib"
require "math"

require "src.engine.logger"
require "src.engine.audio.util"
require "allocators.default"

global SyncedAudioPlayer = @record{
    stream: rl.music,
    data: span(byte),

    speed: float32,
    time: float32,
}

function SyncedAudioPlayer.from_path(path: string, volume: float32, speed: float32): SyncedAudioPlayer
    local player: SyncedAudioPlayer

    player.stream = rl.loadMusicStream(path)
    rl.setMusicVolume(player.stream, volume)
    rl.setMusicPitch(player.stream, speed)
    player.speed = speed

    return player
end

function SyncedAudioPlayer.from_bytes(data: span(byte), volume: float32, speed: float32): SyncedAudioPlayer
    local player: SyncedAudioPlayer

    logger:info("Loading audio: ", #data, " bytes")

    player.data = data;

    player.stream = rl.loadMusicStreamFromMemory(get_audio_file_format(data), (@*[0]cuchar)(player.data.data), #data)

    rl.setMusicVolume(player.stream, volume)
    rl.setMusicPitch(player.stream, speed)
    player.speed = speed    

    return player
end

function SyncedAudioPlayer:play(from: float32): void
    rl.playMusicStream(self.stream)
    rl.seekMusicStream(self.stream, from)
end

function SyncedAudioPlayer:should_sync(): boolean
    return math.abs(self.time - rl.getMusicTimePlayed(self.stream)) >= 0.2
end

function SyncedAudioPlayer:sync(): void
    if self:should_sync() then
        logger:info("Resynced audio to ", self.time)
        rl.seekMusicStream(self.stream, self.time)
    end
end

function SyncedAudioPlayer:update(): void
    if rl.IsMusicStreamPlaying(self.stream) ~= true then return end

    rl.updateMusicStream(self.stream)
    self.time = self.time + rl.getFrameTime()
    self:sync()
end