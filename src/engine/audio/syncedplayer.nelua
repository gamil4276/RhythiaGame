require "raylib"
require "memory"

require "src.engine.logger"
require "src.engine.audio.util"
require "allocators.default"

global SyncedAudioPlayer = @record{
    stream: rl.music,
    data: vector(byte),

    speed: float32,
    time: float32,
    
    last_time: float32,
}

function SyncedAudioPlayer.from_path(path: string, volume: float32, speed: float32): SyncedAudioPlayer
    local player: SyncedAudioPlayer

    player.stream = rl.loadMusicStream(path)
    rl.setMusicVolume(player.stream, volume)
    rl.setMusicPitch(player.stream, speed)
    player.speed = speed

    return player
end

function SyncedAudioPlayer.from_bytes(data: span(byte), volume: float32, speed: float32): SyncedAudioPlayer
    local player: SyncedAudioPlayer

    logger:info("Loading audio: ", #data, " bytes")

    player.stream = rl.loadMusicStreamFromMemory(get_audio_file_format(data), (@*[0]cuchar)(data.data), #data)
    rl.setMusicVolume(player.stream, volume)
    rl.setMusicPitch(player.stream, speed)
    player.speed = speed    

    return player
end

function SyncedAudioPlayer:play(from: float32): void
    rl.playMusicStream(self.stream)
    rl.seekMusicStream(self.stream, from)
end

function SyncedAudioPlayer:update(): void
    -- rl.updateMusicStream(self.stream)
end