require "src.util.bytestream"
require "stringbuilder"
require "sequence"
require "memory"
require "allocators.default"

require "src.engine.logger"
require "src.util.bytestream"
require "src.content.beatmap.beatmapset"

-- test

local DataOffsets = @record{
    custom_data: uint64,
    markers: uint64,
    audio: uint64,
    audio_length: uint64
}

local BlockOffsets = @enum{
    Magic = 0x0,
    Version = 0x4,
    NoteCount = 0x22,
    Difficulty = 0x2a,
    DataOffsets = 0x30,
    MarkerOffset = 0x70,
    IdOffset = 0x80,
}

local function read_magic(map: bytestream): string
    map:seek(BlockOffsets.Magic)
    return tostring(map:read_exact(4))
end

local function verify_signature(map: bytestream): boolean
    return read_magic(map) == "SS+m"
end

local function get_version(map: bytestream): uint16
    map:seek(BlockOffsets.Version)
    return map:get_16()
end

local function get_title(map: bytestream): string
    map:seek(BlockOffsets.IdOffset)
    local title_offs = BlockOffsets.IdOffset + map:get_16() + 0x2
    map:seek(title_offs)
    return map:get_string()
end

local function get_mappers(map: bytestream): vector(string)
    local mappers: vector(string)

    map:seek(BlockOffsets.IdOffset)
    local title_offs = BlockOffsets.IdOffset + map:get_16() + 0x2
    map:seek(title_offs)
    local mapper_offs = title_offs + map:get_16() + 0x2
    map:seek(mapper_offs)

    map:get_string()

    local mappers_len = map:get_16()
    for i = 0, <mappers_len do
        mappers:push(map:get_string())
    end

    return mappers
end

local function get_audio(map: bytestream, offsets: DataOffsets): span(byte)
    map:seek(offsets.audio)
    
    local audio = default_allocator:new(@byte, offsets.audio_length)
    print(#audio, offsets.audio, offsets.audio_length)
    for i = 0, <offsets.audio_length do
        audio[i] = map:get_8()
    end

    return audio
end

local function get_notes(map: bytestream): vector(NoteData)
    local notes: vector(NoteData)

    map:seek(BlockOffsets.NoteCount)
    local note_count = map:get_32()

    map:seek(BlockOffsets.MarkerOffset)
    notes:reserve(note_count)

    local convUnion = @union {
        n: uint32,
        o: float32,
    }

    for i = 0, <note_count do
        local time = (@float32)(map:get_32()) / 1000.0

        map:get_8() -- why the useless number????

        local has_quantum = map:get_8() == 1
        if has_quantum then
            local x_conv: convUnion
            local y_conv: convUnion
            x_conv.n = map:get_32()
            y_conv.n = map:get_32()

            local note = NoteData { -- still not sure how to convert uint32 to float, will do later
                x = -(x_conv.o - 1.0),
                y = -(y_conv.o - 1.0),
                t = time,
            }
            notes:push(note)            
        else
            notes:push(NoteData{
                x = -((@float32)(map:get_8()) - 1.0),
                y = -((@float32)(map:get_8()) - 1.0),
                t = time,
            })
        end
    end

    logger:info("Loaded ", note_count, " notes")

    return notes
end

local function get_data_offsets(map: bytestream): DataOffsets
    local offsets = DataOffsets{}
    
    map:seek(BlockOffsets.DataOffsets)
    
    offsets.custom_data = map:get_64()

    map:seek(0x40)
    offsets.audio = map:get_64()
    offsets.audio_length = map:get_64()

    print(offsets.audio_length)

    map:seek(BlockOffsets.MarkerOffset)
    offsets.markers = map:get_64()

    return offsets
end

function BeatmapSet.from_sspm(path: string): BeatmapSet
    local set = BeatmapSet {
        broken = false
    }

    logger:info("Loading map '", path, "'")

    local file, msg, code = bytestream.open(path)

    if code ~= 0 then
        logger:warn("Failed to open map file '", path, "'")
        set.broken = true
        return set
    end

    if verify_signature(file) ~= true then
        logger:warn("Incorrect file signature, got: '", read_magic(file), "'")
        set.broken = true
        return set
    end

    local offsets = get_data_offsets(file)

    set.version = get_version(file)
    set.title = get_title(file)
    set.mappers = get_mappers(file)
    set.audio = get_audio(file, offsets)

    set.difficulties:push(Beatmap{
        version = 1,
        name = "SSPMap",
        notes = get_notes(file),
    })

    return set
end